package me.jmlab.coding.test.algorithm;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;

public final class Permutation<T> implements BiFunction<List<T>, Integer, List<List<T>>> {

    private List<T> input;
    private int r;

    private List<List<T>> result  = new ArrayList<>();

    private int[] pick;

    private void init(List<T> input, int r) {
        this.input = input;
        this.r = r;
        this.pick = new int[r];
    }

    private void calculate(int depth) {
        if (depth == r) {
            List<T> c = new ArrayList<>();
            for (int p: pick) {
                c.add(input.get(p));
            }

            result.add(c);

            return;
        }

        for (int i = 0; i < input.size(); i++) {
            pick[depth] = i;
            calculate(++depth);
        }
    }

    @Override
    public List<List<T>> apply(List<T> ts, Integer integer) {

    }
}
